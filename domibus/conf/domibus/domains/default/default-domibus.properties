
# ---------------------------------- GUI -------------------------

#The title shown in the Tab of Admin Console
#default.domibus.ui.title.name=windowTitle

#The name of the domain
#default.domain.title=domainTitle

#support team name
#default.domibus.ui.support.team.name=EDELIVERY Support Team

#support team email
#default.domibus.ui.support.team.email=CEF-EDELIVERY-SUPPORT@ec.europa.eu

#Max rows for CSV export
#default.domibus.ui.csv.rows.max=10000

# how many minutes after message's received date the Resend button will become enabled for messages having SEND_ENQUEUED status
#default.domibus.ui.resend.action.enabled.received.minutes=5

#Whether the Messages page should be the default landing page after login (defaults to true, but should be set to false in high load environments)
#default.domibus.ui.pages.messageLogs.landingPage.enabled=true

#Whether the Messages page has all the advanced capabilities (defaults to true, but should be set to false in high load environments)
#default.domibus.ui.pages.messageLogs.search.advanced.enabled=true

# ---------------------------------- Security ----------------------------------

#Domibus encrypts the configured passwords if activated
#default.domibus.password.encryption.active=false

#List of configured passwords to be encrypted. The properties should not be prefixed by the domain name.
#default.domibus.password.encryption.properties=domibus.security.keystore.password,domibus.security.key.private.password,domibus.security.truststore.password,domibus.security.key.private.rsa.password,domibus.security.key.private.rsa.sign.password,domibus.security.key.private.rsa.decrypt.password,domibus.security.key.private.ecc.password,domibus.security.key.private.ecc.sign.password,domibus.security.key.private.ecc.decrypt.password

#The location where the encrypted key is stored
#default.domibus.password.encryption.key.location=${domibus.config.location}/domains/default/encrypt

#Password can be viewed if true;
#default.domibus.properties.password.view.allow=true

#Number of console login attempt before the user is deactivated (default 5)
#default.domibus.console.login.maximum.attempt=5

#Time in seconds for a suspended user to be reactivated. (1 hour per default if property is not set, if 0 the user will not be reactivated)
#default.domibus.console.login.suspension.time=3600

#Enable caching of CRLs by URL. To enable, also uncomment the cache in the ehcache xml configuration
# If crlByCert cache is not enabled or if it doesn't contain the key for a certificate then this cache is used
#default.domibus.certificate.crlByUrl.cache.enabled=false

#Enable caching of CRLs by certificate. Note that, while a CRL is cached, any certificates that were revoked since it was cached would still be accepted
#default.domibus.certificate.crlByCert.cache.enabled=true

# ---------------------------------- Plugin Security ----------------------------------

#Number of plugin users login attempts before the user is deactivated (default 5)
#default.domibus.plugin.login.maximum.attempt=5

#Time in seconds for a suspended plugin user to be reactivated. (1 hour per default if property is not set, if 0 the user will not be reactivated)
#default.domibus.plugin.login.suspension.time=3600

#Cron job that determines the interval at which the system checks for plugin account to be reactivated.
#default.domibus.plugin.account.unlock.cron=0 0/1 * * * ?

# ---------------------------------- Password Policy -----------------------------------

#Password minimum complexity rules (empty to disable password complexity enforcement)
#default.domibus.passwordPolicy.pattern=^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&+=\\-_<>.,?:;*/()|\\[\\]{}'"\\\\]).{16,32}$

#The error message shown to the user in case the password does not follow the regex put in the default.domibus.passwordPolicy.pattern property
#default.domibus.passwordPolicy.validationMessage=Minimum length: 16 characters;Maximum length: 32 characters;At least one letter in lowercase;At least one letter in uppercase;At least one digit;At least one special character

#Password expiration policy in days (0 to disable)
#default.domibus.passwordPolicy.expiration=90

#Default password expiration policy in days (0 to disable)
#default.domibus.passwordPolicy.defaultPasswordExpiration=15

#Password expiration policy: how many days before expiration should the system warn users at login
#default.domibus.passwordPolicy.warning.beforeExpiration=15

#Password reuse policy: do not reuse any of the last N passwords (0 to disable)
#default.domibus.passwordPolicy.dontReuseLast=5

#Default password validation policy enabled/disabled (by default is enabled)
#default.domibus.passwordPolicy.checkDefaultPassword=true

#Cron expression that specifies the frequency of the password expiration check
#default.domibus.passwordPolicies.check.cron=0 0 0/1 * * ?

# ---------------------------------- Plugin Users Password Policy -----------------------------------

#Password minimum complexity rules (empty to disable password complexity enforcement)
#default.domibus.plugin.passwordPolicy.pattern=(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&+=\\-_<>.,?:;*/()|\\[\\]{}'"\\\\]).{16,32}$

#The error message shown to the user in case the password does not follow the regex put in the domibus.plugin.passwordPolicy.pattern property
#default.domibus.plugin.passwordPolicy.validationMessage=Minimum length: 16 characters;Maximum length: 32 characters;At least one letter in lowercase;At least one letter in uppercase;At least one digit;At least one special character

#Password expiration policy in days (0 to disable)
#default.domibus.plugin.passwordPolicy.expiration=90

#Default password expiration policy in days (0 to disable)
#default.domibus.plugin.passwordPolicy.defaultPasswordExpiration=1

#Password reuse policy: do not reuse any of the last N passwords (0 to disable)
#default.domibus.plugin.passwordPolicy.dontReuseLast=5

#Cron expression that specifies the frequency of the password expiration check
#default.domibus.plugin_passwordPolicies.check.cron=0 0 0/1 * * ?

# ---------------------------------- Keystore/Truststore -----------------------

#The initial location of the keystore; used only the first time domibus starts and persisted in the DB to be used from there on
default.domibus.security.keystore.location=${domibus.config.location}/domains/default/keystores/default-gateway_keystore.jks

#The type of the used keystore
default.domibus.security.keystore.type=jks

#The password used to load the keystore
default.domibus.security.keystore.password=keystore_password

#Private key
#The alias from the keystore of the private key
default.domibus.security.key.private.alias=private_key_alias

#The private key password
default.domibus.security.key.private.password=private_key_password

#Truststore
#The initial location of the truststore; used only the first time domibus starts and persisted in the DB to be used from there on
default.domibus.security.truststore.location=${domibus.config.location}/domains/default/keystores/default-gateway_truststore.jks

#Type of the used truststore
default.domibus.security.truststore.type=jks

#The password used to load the trustStore
default.domibus.security.truststore.password=truststore_password

# ------------- Security Profiles -------------------

#For enabling Security Profiles for signing and encryption uncomment the following parameters accordingly

# --- RSA Profile ---

#Sign
#default.domibus.security.key.private.rsa.sign.alias=private_key_rsa_sign_alias
#default.domibus.security.key.private.rsa.sign.password=private_key_rsa_sign_password
#default.domibus.security.key.private.rsa.sign.type=RSA

#Decrypt
#default.domibus.security.key.private.rsa.decrypt.alias=private_key_rsa_decrypt_alias
#default.domibus.security.key.private.rsa.decrypt.password=private_key_rsa_decrypt_password
#default.domibus.security.key.private.rsa.decrypt.type=RSA

# --- ECC Profile ---

#Sign
#default.domibus.security.key.private.ecc.sign.alias=private_key_ecc_sign_alias
#default.domibus.security.key.private.ecc.sign.password=private_key_ecc_sign_password
#The type property specifies the algorithm type of the message signing certificate. Instead of the algorithm type name, the corresponding curve identifier will pe specified.
#One or more algorithm types can be specified, comma-separated.
#For eg. "1.3.101.112" is the identifier of the ED25519 algorithm's curve. ECDSA algorithms can be used as well.
#default.domibus.security.key.private.ecc.sign.type=1.3.101.112

#Decrypt
#default.domibus.security.key.private.ecc.decrypt.alias=private_key_ecc_decrypt_alias
#default.domibus.security.key.private.ecc.decrypt.password=private_key_ecc_decrypt_password
#The type property specifies the algorithm type of the message decryption certificate. Instead of the algorithm type name, the corresponding curve identifier will pe specified.
#One or more algorithm types can be defined, comma-separated.
#For eg. "1.3.101.112" is the identifier of the X25519 algorithm's curve and "1.3.101.111" is the identifier of the X448 algorithm's curve. Other curves can be used as well.
#default.domibus.security.key.private.ecc.decrypt.type=1.3.101.110,1.3.101.111

#Priority order of Security Profiles used in Dynamic Discovery to set the Transport Profile
#default.domibus.security.profile.order=ECC,RSA

# ---------------------------------- Database ----------------------------------

#Domain schema
default.domibus.database.schema=default_domain_schema

# ---------------------------------- Payload -----------------------------------

#It is possible to configure Domibus to save the message payloads on the file system instead of the database. This setting is recommended when exchanging payloads bigger than 30MB.
#In order to enable the file system storage please configure the following property, it is the location on the file system where the payloads will be saved.
#Remark:
#In a cluster configuration the file system storage needs to be accessible by all the nodes from the cluster.
#default.domibus.attachment.storage.location=your_file_system_location

#Domibus encrypts the payloads stored in the database or file system if this property is active.
#default.domibus.payload.encryption.active=false

#Domibus store the payload on a folder structure YYYY/DD/MM/HH determined by the time of the creation (UTC) + domibus.payload.file_system.folder.added_minutes
#default.domibus.payload.file_system.folder.added_minutes=1

#The threshold in minutes for considering the temporary payloads as expired. The expired temporary payloads are scheduled to be deleted.
#default.domibus.payload.temp.job.retention.expiration=120

#Temporary files are excluded from deletion if this regular expression matches the file name
#default.domibus.payload.temp.job.retention.exclude.regex=.*ehcache-sizeof-agent.*

#List of directories to check for cleaning the temporary files.
#default.domibus.payload.temp.job.retention.directories=domibus.attachment.temp.storage.location

#Limit attachments per message to 28 (count enforced by Apache Santuario library for extended XML signature validation. Ref: https://santuario.apache.org/faq.html#faq-4.SecureValidation)
#default.domibus.payload.limit.28attachments.per.message=true

#When set to true, Domibus tries to decompress the archived payloads on receiving a message. In case it fails to decompress one payload, an error receipt is returned. Defaults to false.
#default.domibus.payload.decompression.validation.active=false

# ---------------------------------- Message -----------------------------------

#The suffix of the messageId generated by this instance of Domibus. Schema is:  ${UUID}@${SUFFIX}
#default.domibus.msh.messageid.suffix=domibus.eu

#The maximum size of message in bytes that can be downloaded via admin console
#default.domibus.message.download.maxSize=10000000

#If enabled, diagnostics data will be logged when a message submission fails
#default.domibus.message.submission.diagnostics.enabled=false

# ---------------------------------- Retry -------------------------------------

#Retry Worker execution interval as a cron expression
#default.domibus.msh.retry.cron=0/30 * * * * ?

#Limits the number of WAITING_FOR_RETRY messages retrieved by the retry worker at every run.
#default.domibus.msh.retry.maxMessageCount=1000

#List of party names for which the smart retry feature is active (comma-separated list)
#default.domibus.smart.retry.enabled=

# ---------------------------------- Dynamic Discovery -------------------------

#Whether to use dynamic discovery or not
#default.domibus.dynamicdiscovery.useDynamicDiscovery=false

#The SML zone
#default.domibus.smlzone=acc.edelivery.tech.ec.europa.eu

#The dynamic discovery client to be used for the dynamic process. Possible values: OASIS and PEPPOL. Defaults to OASIS.
#default.domibus.dynamicdiscovery.client.specification=OASIS

#The lookup types used by the dynamic discovery client
#default.domibus.dynamicdiscovery.client.dns.lookup.types=NAPTR,CNAME

#The dynamic discovery client to be used for the dynamic process. Possible values: OASIS and PEPPOL. Defaults to OASIS.
#default.domibus.dynamicdiscovery.client.specification=OASIS

#Specifies the PEPPOL dynamic discovery client mode: PRODUCTION or TEST mode. Defaults to TEST.
#default.domibus.dynamicdiscovery.peppolclient.mode=TEST

#Apart from validating response of signer certificates against the truststore, the Oasis Dynamic Discovery Client gives
#the possibility to add (optional) a regular expression (eg ^.*EHEALTH_SMP.*$)
#to validate any certificate metadata related to the subject of the signer certificate.
#default.domibus.dynamicdiscovery.oasisclient.regexCertificateSubjectValidation=^.*EHEALTH_SMP.*$

# List of certificate policy OIDs separated by comma where at least one must be in the service metadata signer's
# certificate policy extension to consider it as is trusted. Example: 1.3.6.1.4.1.7879.13.25
# (empty value disables the certificate policy validation)
#default.domibus.dynamicdiscovery.client.allowedCertificatePolicyOIDs=

#The role of the responder PartyId for the Peppol Dynamic Discovery Client
#default.domibus.dynamicdiscovery.peppolclient.partyid.responder.role=http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/responder

#The role of the responder PartyId for the Oasis Dynamic Discovery Client
#default.domibus.dynamicdiscovery.oasisclient.partyid.responder.role=http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/responder

#The type of the PartyId for the Peppol Dynamic Discovery Client
#default.domibus.dynamicdiscovery.peppolclient.partyid.type=urn:fdc:peppol.eu:2017:identifiers:ap

#The type of the PartyId for the Oasis Dynamic Discovery Client
#default.domibus.dynamicdiscovery.oasisclient.partyid.type=urn:oasis:names:tc:ebcore:partyid-type:unregistered

#The AS4 transport profile by which the endpoint is identified in the SMP response
#default.domibus.dynamicdiscovery.transportprofileas4=bdxr-transport-ebms3-as4-v1p0

#Retention cron expression for the job responsible for deleting from the truststore the dynamically discovered certificates and from the Pmode dynamically discovered parties
#It executes at 23:00 every Saturday
#default.domibus.dynamicdiscovery.lookup.clean.retention.cron=0 0 23 ? * SAT *

#Retention in hours for deleting the following entities:
# - from the truststore the dynamically discovered certificates
# - from the Pmode the dynamically discovered parties
# - final recipient endpoint URL
#Entities will be deleted if they are not lookup up during the configured value
#If the property value is empty, the entities will not be deleted
#default.domibus.dynamicdiscovery.lookup.clean.retention.hours=48

# ---------------------------------- Validation --------------------------------

#If activated, Domibus will check if the received message is self sent
#default.domibus.receiver.selfsending.validation.active=true

#If activated Domibus will verify before sending a message if the receiver's certificate is valid and not revoked. If the receiver's certificate
#is not valid or it has been revoked Domibus will not send the message and it will mark it as SEND_FAILURE (default is true)
#default.domibus.receiver.certificate.validation.onsending=true

#If activated Domibus will verify before sending a message if his own certificate is valid and not revoked. If the certificate is not valid
#or it has been revoked Domibus will not send the message and it will mark it as SEND_FAILURE (default is true)
#default.domibus.sender.certificate.validation.onsending=true

#If activated Domibus will verify before receiving a message if the sender's certificate is valid and not revoked. If the certificate is
#not valid or it has been revoked Domibus will not accept the message (default is true)
#default.domibus.sender.certificate.validation.onreceiving=true

#If activated Domibus will verify before receiving a User Message when using Push/Pull or a Signal Acknowledgement (NRR) when using Pull, that the sender certificate is valid and not revoked
# When disabled, none of the other checks are performed on the sender's certificate.
#default.domibus.sender.trust.validation.onreceiving=true

#If activated Domibus will verify before receiving syncronously a signal message following a push or pull request, that the sender certificate is valid and not revoked
#default.domibus.sender.trust.validation.signal.sync.onreceiving=true

#When this property is not empty Domibus will verify before receiving a message(using static or dynamic discovery), that the subject of the sender's certificate matches the regular expression.
#default.domibus.sender.trust.validation.expression=

#When this property is not empty Domibus will verify before receiving a message using dynamic discovery receiver, that the subject of the sender's certificate matches the regular expression when only issuer chain is added to truststore
#A string separated comma(,) of regular expressions which will be applied to the subject DN of the certificate used for signature validation, after trust verification of the certificate chain associated with the certificate.
#default.domibus.sender.trust.dynamicReceiver.validation.expression=.*

# List of certificate policy OIDs separated by comma. When this property is not empty Domibus will verify before receiving a message,
# that certificate contains at lest one certificate policy OID in certificatePolicy extension to consider it as is trusted.
#default.domibus.sender.trust.validation.allowedCertificatePolicyOIDs=

#When enabled, Domibus will verify before receiving a message, that the alias (party name) is present in the signing certificate subject.
#default.domibus.sender.certificate.subject.check=false

#When enabled, Domibus will verify before receiving a message, that the sender's certificate matches the certificate in the truststore,
#loaded based on the alias (party name)
#default.domibus.sender.trust.validation.truststore_alias=true

#When enabled, the system default certificates (cacerts) are used in addition to custom certificates, to validate that a call to a https server can be trusted
#default.domibus.cacerts.download.enabled=true

#Accepted Format for MessageId (Default value, based on RFC2822 [CORE 5.2.2.1]: ^[\\x20-\\x7E]*$ ): all characters in hexa interval 20-7E but '=' character)
#default.domibus.sendMessage.messageIdPattern=^[\\x20-\\x7E]*$

#Accepted Format for xsd:datetime for AS4 communication
#default.domibus.datetime.pattern.onreceiving=yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS][.SSSSSS][.SSS][z]

#Format of xsd:datetime used for AS4Receipt
#default.domibus.datetime.pattern.onsending=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'

#Pattern for validating partyIdType field (empty to disable)
#default.domibus.partIdType.validation.pattern=^urn:oasis:names:tc:ebcore:partyid\-type:[a-zA-Z0-9_:-]+$

#The error message shown to the user in case the partyIdType doesn't follow the regex put in the default.domibus.partIdType.validation.pattern property
#default.domibus.partIdType.validation.message=You should follow the rule: urn:oasis:names:tc:ebcore:partyid-type:[....]

#Enables the validation of Domibus properties values (defaults to true)
#default.domibus.property.validation.enabled=true

#Validate the qualified name of the Mpc in the received UserMessage on MSH endpoint matches the qualified name of the Mpc configured on the pMode leg configuration
#default.domibus.pmode.legconfiguration.mpc.validation.enabled=true

#This property defines the behavior of Domibus when the Mpc attribute is not present in the UserMessage.
# If set to true, Domibus fills in the value of the Mpc with the value found in the matching leg configuration (configured in the pMode).
# If set to false, Domibus fills in the value of the Mpc with the value of the EBMS3 defaultMpc ("http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/defaultMPC")
#default.domibus.pmode.legconfiguration.mpc.enabled=true

#If enabled, detailed diagnostics data will be logged when a message does not match the PMode
#default.domibus.pmode.legconfiguration.diagnostics.enabled=false

# ---------------------------------- Dispatcher --------------------------------

#Timeout values for communication between the Access Points
#ConnectionTimeOut - Specifies the amount of time, in milliseconds, that the consumer will attempt to establish a connection before it times out. 0 is infinite.
#default.domibus.dispatcher.connectionTimeout=60000

#ReceiveTimeout - Specifies the amount of time, in milliseconds, that the consumer will wait for a response before it times out. 0 is infinite.
#default.domibus.dispatcher.receiveTimeout=60000

#Allows chunking when sending messages to other Access Points
#default.domibus.dispatcher.allowChunking=false

#If domibus.dispatcher.allowChunking is true, this property sets the threshold at which messages start getting chunked(in bytes). Messages under this limit do not get chunked. Defaults to 100 MB.
#default.domibus.dispatcher.chunkingThreshold=104857600

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when sending messages to other Access Points
#default.domibus.dispatcher.concurency=5-20

#The timeout of the dispatcher JMS queue transaction(in seconds)
#default.domibus.dispatcher.timeout=300

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when sending large messages(SplitAndJoin) to other Access Points
#default.domibus.dispatcher.largeFiles.concurrency=1

#Cache the dispatcher clients used for communication between the Access Points. Defaults to true.
#default.domibus.dispatcher.cacheable=true

#Specifies if the connection will be kept alive between C2 and C3. Default value is true.
#default.domibus.dispatcher.connection.keepAlive=true

# ---------------------------------- Retention ---------------------------------

#Cron expression used for configuring the retention worker scheduling. The retention worker deletes the expired messages(downloaded and not-downloaded).
#default.domibus.retentionWorker.cronExpression=0 0/1 * * * ?

#Uncomment the following line if you need to tweak the maximum downloaded messages to be deleted by the retention worker. Defaults to 50.
#default.domibus.retentionWorker.message.retention.downloaded.max.delete=50

#Uncomment the following line if you need to tweak the maximum not-downloaded messages to be deleted by the retention worker. Defaults to 50.
#default.domibus.retentionWorker.message.retention.not_downloaded.max.delete=50

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when deleting messages
#default.domibus.retention.jms.concurrency=5-10


### ---------------------------------- Retention - Deletion Strategy PARTITIONS ---------------------------------
#Cron expression used for configuring the partition worker scheduling. The partition worker verifies if partitions were properly created in advance.
#default.domibus.partitions.worker.cron=0 9 * * * ?

#Maximum number of expired partitions to be dropped by the retention worker in one run. Defaults to 10 partitions.
#default.domibus.partitions.drop.max_partitions=10

#When set to true, before dropping a partition, verifies if all messages on that partition were previously archived.
#This check is a guard rail for dropping partitions when the eArchiving mechanism is disabled. Default is true.
#default.domibus.partitions.drop.check.messages.earchived=true

# ---------------------------------- Pulling-----------------------------------

#Cron expression used for configuring the message puller scheduling.
#default.domibus.msh.pull.cron=0 0 0/1 * * ?

# Number of threads used to parallelize the pull requests.
#default.domibus.pull.queue.concurency=1-1

# Number of threads used to parallelize the pull receipts.
#default.domibus.pull.receipt.queue.concurrency=1-1

# Minimum amount of time to wait for a pull receipt before changing the message status back to READY_TO_PULL. In minutes.
#default.domibus.pull.receipt.timeout=5

# When handling the reliability of an incoming receipt, in rare cases it may be necessary to try twice to retrieve the sent user message envelope.
# This property specifies the number of milliseconds to wait before retrying. Use 0 to disable the retrial.
#default.domibus.pull.receipt.reliability.retry=500

#Number or requests per MPC executed every cron cycle. Generic value that applies to all MPCs.
#default.domibus.pull.request.send.per.job.cycle=1

#Optional number or requests per specific MPC executed every cron cycle.
#Takes precedence over the generic "domibus.pull.request.send.per.job.cycle property" value.
#MPCs are indicated by their short names.
#default.domibus.pull.request.send.per.job.cycle.per.mpc.MPC_NAME=1

#Time in second for the system to recover its full pull capacity when job schedule is one execution per second.
#If configured to 0, no incremental frequency is executed and the pull pace is executed at its maximum.
#default.domibus.pull.request.frequency.recovery.time=0

#Number of connection failure before the system decrease the pull pace.
#default.domibus.pull.request.frequency.error.count=10

#Pull Retry Worker execution interval as a cron expression
#default.domibus.pull.retry.cron=0/10 * * * * ?

#Allow dynamic initiator on pull requests - 0 or multiple initiators are allowed in the Pmode process
#default.domibus.pull.dynamic.initiator=false

#Allow multiple legs configured on the same pull process (with the same security policy)
#default.domibus.pull.multiple_legs=false

#Force message into READY_TO_PULL when mpc attribute is present (default is false)
#default.domibus.pull.force_by_mpc=false

#MPC initiator separator. This is used when the MPC provides information on the initiator: baseMpc/SEPARATOR/partyName
#default.domibus.pull.mpc_initiator_separator=PID

# ---------------------------------- Alert management -----------------------------------
#Enable/disable the entire alert module. Pay attention to the fact that if the module is activated, all properties
#under the mandatory section should be configured.
#default.domibus.alert.active=true

#Allow to disable alert mail sending.
#default.domibus.alert.mail.sending.active=false

#Upgrade the connection to use TLS encryption. Since this parameter is Domibus independent, it should not be renamed
#default.domibus.alert.mail.smtp.starttls.enable=true

# -----------------------------------Mandatory configuration start (if domibus.alert.mail.sending.active=true) -----------

#Alert sender email.
default.domibus.alert.sender.email=

#Alert email receiver. You can specify multiple recipients by using semicolon separated email addresses:name1@gmail.com;name2@gmail.com
default.domibus.alert.receiver.email=

# ----------------------------------Mandatory configuration end-----------------------------------

#The following properties can stay commented if no modifications to the default values are needed.

#Cron configuration for cleaning alerts.
#default.domibus.alert.cleaner.cron=0 0 0/1 * * ?

#Lifetime in days of alerts before cleaning.
#default.domibus.alert.cleaner.alert.lifetime=20

#Frequency of failed alerts retry.
#default.domibus.alert.retry.cron=0 0/10 * * * ?

#Elapsed time in minutes between alert retry.
#default.domibus.alert.retry.time=10

#Maximum number of attempts for failed alerts
#default.domibus.alert.retry.max_attempts=2

# ---------------------------------- Alert management:messaging module -----------------

#Enable/disable the messaging alert module.
#default.domibus.alert.msg.communication_failure.active=true

#Message status change that should be notified by the messaging alert module. Comma separated.
#default.domibus.alert.msg.communication_failure.states=SEND_FAILURE

#Alert levels corresponding to message status defined in previous property(domibus.alert.msg.communication_failure.states) .
#Should be (HIGH, MEDIUM OR LOW)
#default.domibus.alert.msg.communication_failure.level=HIGH

#Messaging alert module mail subject.
#default.domibus.alert.msg.communication_failure.mail.subject=Message status change

#The priority level of the alerts that report the messages in a non-final state that are not processed anymore (LOW, MEDIUM or HIGH)
#default.domibus.ongoingMessagesSanitizing.alert.level=MEDIUM

#Subject of the email alerts that report the messages in a non-final state that are not processed anymore
#default.domibus.ongoingMessagesSanitizing.alert.mail.subject=Ongoing messages

#Body of the email alerts that report the messages in a non-final state that are not processed anymore
#default.domibus.ongoingMessagesSanitizing.alert.mail.body=There are messages currently in ongoing statuses that are not processed anymore. Here is the list of IDs and statuses of these messages: [{messages}].

# ---------------------------------- Alert management:Authentication module -----------------

#Enable/disable the login failure alert of the authentication module.
#default.domibus.alert.user.login_failure.active=true

#Alert level for login failure.
#default.domibus.alert.user.login_failure.level=LOW

#Login failure mail subject.
#default.domibus.alert.user.login_failure.mail.subject=Login failure

#Enable/disable the account disable alert of the authentication module.
#default.domibus.alert.user.account_disabled.active=true

#Alert level for account disabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.user.account_disabled.level=HIGH

#When should the account disabled alert be triggered.
# 2 possible values:
# AT_LOGON: An alert will be triggered each time a user tries to login to a disabled account.
# WHEN_BLOCKED: An alert will be triggered once when the account got disabled.
#default.domibus.alert.user.account_disabled.moment=WHEN_BLOCKED

#Account disabled mail subject.
#default.domibus.alert.user.account_disabled.subject=Account disabled

#Enable/disable the account enabled alert of the authentication module.
#default.domibus.alert.user.account_enabled.active=false

#Alert level for account enabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.user.account_enabled.level=MEDIUM

#Account enabled mail subject.
#default.domibus.alert.user.account_enabled.subject=Account enabled

# ---------------------------------- Alert management:Authentication module for Plugin users-----------------

#Enable/disable the login failure alert of the authentication module.
#default.domibus.alert.plugin.user.login_failure.active=true

#Alert level for login failure.
#default.domibus.alert.plugin.user.login_failure.level=LOW

#Login failure mail subject.
#default.domibus.alert.plugin.user.login_failure.mail.subject=Login failure

#Enable/disable the account disable alert of the authentication module.
#default.domibus.alert.plugin.user.account_disabled.active=true

#Alert level for account disabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.plugin.user.account_disabled.level=HIGH

#When should the account disabled alert be triggered.
# 2 possible values:
# AT_LOGON: An alert will be triggered each time a user tries to login to a disabled account.
# WHEN_BLOCKED: An alert will be triggered once when the account got disabled.
#default.domibus.alert.plugin.user.account_disabled.moment=WHEN_BLOCKED

#Account disabled mail subject.
#default.domibus.alert.plugin.user.account_disabled.subject=Account disabled

#Enable/disable the account enable alert of the authentication module.
#default.domibus.alert.plugin.user.account_enabled.active=false

#Alert level for account enabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.plugin.user.account_enabled.level=MEDIUM

#Account enabled mail subject.
#default.domibus.alert.plugin.user.account_enabled.subject=Account enabled

# ---------------------------------- Alert management:Certificate scanner -----------------

#Enable/disable the imminent certificate expiration alert of certificate scanner module.
#default.domibus.alert.cert.imminent_expiration.active=true

#Number of days before revocation as from when the system should start sending alerts.
#default.domibus.alert.cert.imminent_expiration.delay_days=60

#Frequency in days between alerts.
#default.domibus.alert.cert.imminent_expiration.frequency_days=14

#Certificate imminent expiration alert level.
#default.domibus.alert.cert.imminent_expiration.level=HIGH

#Certificate imminent expiration mail subject.
#default.domibus.alert.cert.imminent_expiration.mail.subject=Certificate imminent expiration

#Enable/disable the certificate expired alert of certificate scanner module.
#default.domibus.alert.cert.expired.active=true

#Frequency in days between alerts.
#default.domibus.alert.cert.expired.frequency_days=7

#How long(in days) after the revocation should the system trigger alert for the expired certificate.
#default.domibus.alert.cert.expired.duration_days=90

#Certificate expired alert level.
#default.domibus.alert.cert.expired.level=HIGH

#Certificate expired mail subject.
#default.domibus.alert.cert.expired.mail.subject=Certificate expired

# ---------------------------------- Alert management:Password policy  -----------------

#Enable/disable the imminent password expiration alert
#default.domibus.alert.password.imminent_expiration.active=true

#Number of days before expiration as for how long before expiration the system should send alerts.
#default.domibus.alert.password.imminent_expiration.delay_days=15

#Frequency in days between alerts.
#default.domibus.alert.password.imminent_expiration.frequency_days=3

#Password imminent expiration alert level.
#default.domibus.alert.password.imminent_expiration.level=LOW

#Password imminent expiration mail subject.
#default.domibus.alert.password.imminent_expiration.mail.subject=Password imminent expiration

#Enable/disable the imminent password expiration alert
#default.domibus.alert.password.expired.active=true

#Number of days after expiration as for how long the system should send alerts.
#default.domibus.alert.password.expired.delay_days=30

#Frequency in days between alerts.
#default.domibus.alert.password.expired.frequency_days=5

#Password expiration alert level.
#default.domibus.alert.password.expired.level=LOW

#Password expiration mail subject.
#default.domibus.alert.password.expired.mail.subject=Password expired

# ---------------------------------- Various ---------------------------------------

#Whether to delete the message payload on send failure. Defaults to false (the administrator can put the message back in the send queue).
#default.domibus.sendMessage.failure.delete.payload=false

#Whether to delete the message payload on send success. Defaults to true (preserves backwards compatibility).
#default.domibus.sendMessage.success.delete.payload=true

#Should unrecoverable errors be retried or not
#default.domibus.dispatch.ebms.error.unrecoverable.retry=true

#The maximum file size in bytes that can be uploaded through REST ( pMode, trustStore). The default is 50MB.
#default.domibus.file.upload.maxSize=52428800

#prints the raw XML response in the logs in case of EBMS3 error on receiver/sender side (if eu.domibus is put at least on ERROR)
#default.domibus.logging.ebms3.error.print=true

#Configure http timeout (http.connection.timeout, http.socket.timeout, http.connection-manager.timeout) in seconds. Defaults to 10 seconds.
#default.domibus.certificate.crl.http.timeout=10

#Prints the details of the remote receiver certificate used to encrypt the message when sending or the details of the
#remote sender certificate used to verify the trust of the message when receiving. Defaults to false.
#default.domibus.logging.remote.certificates.print=false

#Prints the details of the local sender certificate corresponding to its private key being used to sign the message
#when sending or the details of the local receiver certificate corresponding to its private key when decrypting the
#message when receiving. Please note, when enabling this property, there is an extra delay introduced needed to load
#the certificate corresponding to the private key. Defaults to false.
#default.domibus.logging.local.certificates.print=false

#Prints messages that have been prepared to be sent but which have been enqueued for more than the maximum number
#of minutes that is configured in this property value. Nothing is logged when the eu.domibus.core.ebms3.sender
#logger level is not set to DEBUG or when this value is not greater than 0. Defaults to 0.
#default.domibus.logging.sendMessage.enqueued.max.minutes=0

#Cron expression that specifies the frequency of dispatching messages stuck in SEND_ENQUEUED and WAITING_FOR_RETRY
#default.domibus.messages.stuck.cron=0 0 0/3 * * ?

#The strategy adds these minutes to the interval used to search back for messages in SEND_ENQUEUED and WAITING_FOR_RETRY
#statuses to avoid picking up messages that have been just scheduled to send. Only positive values allowed; a value of
#at least 360 (minutes) is recommended. The value must be higher than the time the SendRetryWorker needs to complete an
#execution to ensure the two workers do not overlap.
#default.domibus.messages.stuck.ignore.recent.minutes=360

#Limits the number of stuck messages retrieved by the sanitizer worker at every run. If set to 0, no messages will be retried, and an alert will be raised instead.
#default.domibus.messages.stuck.maxMessageCount=20000

# ---------------------------------- Extensions ------------------------------------

#Name of the authentication extension used to verify the chain trust. Default is CXF
#default.domibus.extension.iam.authentication.identifier=DEFAULT_AUTHENTICATION_SPI

#With this property, Domibus can disable the trust verification. By default, enabled.
#default.domibus.extension.iam.trust.enabled=true

#Name of the authorization extension used to check incoming message authorization. Default is truststore check.
#default.domibus.extension.iam.authorization.identifier=DEFAULT_AUTHORIZATION_SPI

# ------------------------------- SplitAndJoin ---------------------------------------

#SplitAndJoin only: Domibus uses a  file system location for storing temporary data when processing SplitAndJoin messages
#In a cluster configuration the temporary file system storage needs to be accessible by all the nodes from the cluster.
#default.domibus.attachment.temp.storage.location=your_temporary_file_system_location

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when sending the SourceMessage receipt(Split and Join) to other Access Points
#default.domibus.dispatcher.splitAndJoin.concurrency=1

#The threshold value in MB to switch from synchronous to asynchronous saving of outgoing SourceMessage payloads
#default.domibus.dispatcher.splitAndJoin.payloads.schedule.threshold=1000

#Cron expression that specifies the frequency of the checking if the joinInterval has expired
#default.domibus.splitAndJoin.receive.expiration.cron=0 0/5 * * * ?

# --------------------------- Connection Monitoring ----------------------------------

#Specifies the parties for which to monitor the connection (comma-separated list)
#default.domibus.monitoring.connection.party.enabled=

#Specifies the parties for which to delete the old test messages (comma separated list)
#default.domibus.monitoring.connection.party.history.delete=ALL

#Cron expression that specifies the frequency of test messages sent to monitor the C2-C3 connections
#default.domibus.monitoring.connection.cron=0 0 0/2 ? * * *

#Cron expression that specifies the frequency of test messages sent to itself (e.g. C2-C2 connections)
#default.domibus.monitoring.connection.self.cron=0 0 0/1 ? * * *

#Cron expression that specifies the frequency of deleting test message history sent to gateway party
#default.domibus.monitoring.connection.messages.received.history.delete.cron=0 0 0/1 ? * * *

# --------------------------------------------EArchiving-------------------------------
#Domibus allows for e-archiving if activated
#default.domibus.earchive.active=false

#In a cluster configuration the earchive file system storage needs to be accessible by all the nodes from the cluster.
#default.domibus.earchive.storage.location=your_file_system_location

#Allows to create empty export batches if no messages are found. If false, no batch nor files created when no messages found.
#default.domibus.earchive.export.empty=false

#Cron configuration for executing the eArchiving continuous process.
#default.domibus.earchive.cron=0 0 0/1 * * ?

#Cron configuration for executing the eArchiving sanitizer process.
#default.domibus.earchive.sanitizer.cron=0 0 0 0/1 * ?

# Time window limit (in days) for the continuous eArchiving process. (0 means no limit).
#default.domibus.earchive.continuous.time_window_limit=0

# Time window limit (in days) for the sanitizer eArchiving process. (0 means no limit).
#default.domibus.earchive.sanitizer.time_window_limit=0

#Cron configuration for executing the eArchiving cleanup process.
#default.domibus.earchive.retention.cron=0 0 0/2 * * ?

#maximum messages to be archived for one batch
#default.domibus.earchive.batch.size=5000

#maximum payload size of messages to be archived for one batch(in Mb); 0 to disable
#default.domibus.earchive.batch.size.payload=0

#maximum earchive batches to be created during one job
#default.domibus.earchive.batch.max=10

#Timeout used to retrieve the messages in minutes. Defaults to 0.
# WARNING: this value is rounded to the previous whole hour to limit the messages search scope
# (ex: runtime = 15h12 | if retry.timeout=5  -> latest time for a message to be taken into account: 15h00 and earlier
#                      | if retry.timeout=30 -> latest time for a message to be taken into account: 14h00 and earlier)
#-1 disables this functionality and retrieve the timeout with the loaded PMode
#default.domibus.earchive.batch.retry.timeout=0

#Endpoint where the e-archiving client receives notifications
#default.domibus.earchive.notification.url=

#The user used to access the endpoint of the e-archiving client
#default.domibus.earchive.notification.username=

#The password used to access the endpoint of the e-archiving client
#default.domibus.earchive.notification.password=

#Timeout used when notifying the e-archiving client
#default.domibus.earchive.notification.timeout=5000

#Specify whether to use a proxy when notifying the e-archiving client
#default.domibus.earchive.notification.useProxy=false

#If a batch is not archived during this time, it is considered as expired
#default.domibus.earchive.retention.days=30

#Maximum number of earchive batches to delete at a time
#default.domibus.earchive.retention.delete.max=5000

#If physically delete archived and/or expired batches from the corresponding tables
#default.domibus.earchive.retention.delete.db=true

#An alert is sent if the start date of the continuous job was not updated between now and now - allowed_window (in hours)
#default.domibus.earchive.start_date.stopped.allowed_hours=24

#Enable/disable the Earchive non final message alert.
#default.domibus.alert.earchive.messages_non_final.active=true

#Alert level for Earchive non final message.
#default.domibus.alert.earchive.messages_non_final.level=HIGH

#Earchive non final message mail subject.
#default.domibus.alert.earchive.messages_non_final.mail.subject=Earchive: message not in final state

#Enable/disable the Earchive start date stopped alert.
#default.domibus.alert.earchive.start_date_stopped.active=true

#Alert level for Earchive start date stopped.
#default.domibus.alert.earchive.start_date_stopped.level=HIGH

#Earchive start date stopped mail subject.
#default.domibus.alert.earchive.start_date_stopped.mail.subject=Earchive: continuous job start date stopped

#Enable if e-archiving client needs to receive notifications with additional details like message start date and end date
#default.domibus.earchive.notification.details.enabled=false

#Enable/disable the Earchive message export failed alert.
#default.domibus.alert.earchive.export.failed.active=true

#Alert level for Earchive message export failed alert.
#default.domibus.alert.earchive.export.failed.level=HIGH

#Earchive message export failed alert mail subject.
#default.domibus.alert.earchive.export.failed.mail.subject=Earchive: sanitizer export message failed

#Cron configuration for executing the eArchiving process needed to reexport stuck messages.
#default.domibus.earchive.stuck.cron=0 0 0/1 * * ?

#The strategy adds these minutes to the interval used to search back for batches stuck in STARTED statuses to avoid
#picking up batches that have been just created. Only positive values allowed; a value of at least 360 (minutes) is
#recommended.
#default.domibus.earchive.stuck.ignore.recent.minutes=360

# --------------------------------------------Quartz-------------------------------
#Specifies the amount of time, in milliseconds that used to check if any quartz triggers are blocked. Default value is 10 minutes.
#default.domibus.quartz.trigger.blocked.duration=600000

# -------------------------------------Backup-----------------------------------------

#The minimum interval of time after which a new backup file is created, in hours. Defaults to 24. 0 for creating a backup file on every change.
#default.domibus.property.backup.period.min=24

#The maximum number of backup files to keep. Defaults to 10. 0 for keeping all of them.
#default.domibus.property.backup.history.max=10

# ------------------------------- Diagnostics ----------------------------------------
#Add logs containing diagnostics data at regular intervals, if enabled

#Cron expression that specifies the frequency of the diagnostics
#default.domibus.diagnostics.cron=0 0 0 ? * FRI *

#Specify what diagnostics should be run. Leave empty to disable diagnostics
#Set to versionInfo,alertsCounts,messagesByStatusCounts to get all diagnostics
#jmsQueuesInfo is not allowed in multi-tenant mode
#default.domibus.diagnostics.list=
